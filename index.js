const eslintRules = {
  'accessor-pairs': ['error', {
    setWithoutGet: true,
  }],
  'array-bracket-newline': ['error', 'consistent'],
  'array-bracket-spacing': ['error', 'never'],
  'array-callback-return': ['error'],
  'array-element-newline': ['error', 'consistent'],
  'block-scoped-var': 'error',
  'block-spacing': ['error', 'always'],
  'brace-style': ['error', 'stroustrup'],
  'camelcase': ['error'],
  'comma-dangle': ['error', 'always-multiline'],
  'comma-spacing': ['error', {
    after: true,
    before: false,
  }],
  'comma-style': ['error', 'last'],
  'computed-property-spacing': 'error',
  'consistent-this': ['warn', 'self'],
  'curly': ['error', 'all'],
  'default-case': ['error'],
  'default-case-last': ['error'],
  'dot-location': ['error', 'property'],
  'dot-notation': ['error', {
    allowPattern: '^[a-z_]*_[a-z_]*$',
  }],
  'eol-last': 'error',
  'eqeqeq': ['error', 'smart'],
  'func-call-spacing': ['error', 'never'],
  'func-name-matching': ['error', 'always'],
  'func-names': ['error', 'as-needed'],
  'func-style': ['error', 'declaration'],
  'function-call-argument-newline': ['error', 'consistent'],
  'function-paren-newline': ['error', 'consistent'],
  'grouped-accessor-pairs': ['error', 'getBeforeSet'],
  'id-length': ['error', {
    exceptions: [
      // Iterators
      'i',
      'j',
      'k',
      // Comparators
      'a',
      'b',
      // Geometry
      'x',
      'y',
      'z',
    ],
    min: 2,
  }],
  'implicit-arrow-linebreak': ['error', 'beside'],
  'indent': ['error', 2, {
    MemberExpression: 0,
  }],
  'jsx-quotes': ['error', 'prefer-double'],
  'key-spacing': ['error', {
    afterColon: true,
    beforeColon: false,
    mode: 'strict',
  }],
  'keyword-spacing': ['error', {
    after: true,
    before: true,
  }],
  'line-comment-position': ['error', 'above'],
  'linebreak-style': ['error', 'unix'],
  'lines-between-class-members': ['error', 'always', {
    exceptAfterSingleLine: true,
  }],
  'max-depth': ['warn', 5],
  'max-len': ['error', {
    code: 120,
    ignoreComments: true,
    ignoreRegExpLiterals: true,
    ignoreStrings: true,
    ignoreTemplateLiterals: true,
  }],
  'max-lines-per-function': ['warn', {
    max: 200,
    skipBlankLines: true,
    skipComments: true,
  }],
  'max-params': ['warn', 5],
  'max-statements': ['warn', 50],
  'max-statements-per-line': ['warn', {
    max: 2,
  }],
  'new-cap': 'warn',
  'new-parens': ['error', 'always'],
  'newline-per-chained-call': ['error', {
    ignoreChainWithDepth: 2,
  }],
  'no-array-constructor': 'error',
  'no-bitwise': 'off',
  'no-caller': 'error',
  'no-console': 'error',
  'no-constructor-return': 'error',
  'no-continue': 'off',
  'no-div-regex': 'off',
  'no-else-return': 'off',
  'no-eval': 'error',
  'no-extend-native': 'error',
  'no-extra-bind': 'warn',
  'no-extra-boolean-cast': ['error', {
    enforceForLogicalOperands: true,
  }],
  'no-extra-label': 'off',
  'no-extra-parens': ['error', 'all', {
    enforceForArrowConditionals: true,
    ignoreJSX: 'multi-line',
    nestedBinaryExpressions: true,
  }],
  'no-fallthrough': 'error',
  'no-floating-decimal': 'error',
  'no-implicit-coercion': 'error',
  'no-implicit-globals': 'warn',
  'no-implied-eval': 'error',
  'no-inline-comments': 'error',
  'no-label-var': 'error',
  'no-labels': 'off',
  'no-lonely-if': 'error',
  'no-loop-func': 'warn',
  'no-loss-of-precision': 'error',
  'no-mixed-operators': ['error', {
    allowSamePrecedence: true,
  }],
  'no-mixed-spaces-and-tabs': 'error',
  'no-multi-assign': 'error',
  'no-multi-spaces': 'error',
  'no-multi-str': 'error',
  'no-multiple-empty-lines': ['error', {
    max: 1,
  }],
  'no-nested-ternary': 'error',
  'no-new': 'error',
  'no-new-func': 'error',
  'no-new-wrappers': 'warn',
  'no-octal': 'error',
  'no-octal-escape': 'warn',
  'no-promise-executor-return': 'error',
  'no-proto': 'error',
  'no-restricted-syntax': ['error', 'WithStatement'],
  'no-return-assign': 'error',
  'no-return-await': 'error',
  'no-self-compare': 'warn',
  'no-sequences': 'error',
  'no-shadow': ['error', {
    hoist: 'never',
  }],
  'no-tabs': 'error',
  'no-throw-literal': 'error',
  'no-trailing-spaces': 'error',
  'no-undef': 'error',
  'no-undef-init': 'error',
  'no-underscore-dangle': ['error', {
    allowAfterSuper: true,
    allowAfterThis: true,
  }],
  'no-unmodified-loop-condition': 'error',
  'no-unneeded-ternary': 'warn',
  'no-unreachable': 'error',
  'no-unreachable-loop': 'error',
  'no-unused-expressions': 'warn',
  'no-unused-labels': 'error',
  'no-unused-vars': ['warn', {
    args: 'after-used',
    argsIgnorePattern: '^_',
    caughtErrors: 'all',
    caughtErrorsIgnorePattern: '^_',
    vars: 'all',
  }],
  'no-use-before-define': ['error', {
    classes: false,
    functions: false,
  }],
  'no-useless-backreference': 'error',
  'no-useless-call': 'warn',
  'no-useless-catch': 'warn',
  'no-useless-concat': 'error',
  'no-useless-return': 'error',
  'no-void': 'warn',
  'no-whitespace-before-property': 'error',
  'object-curly-newline': ['error', {
    consistent: true,
  }],
  'object-curly-spacing': ['error', 'never'],
  'object-property-newline': ['error', {
    allowAllPropertiesOnSameLine: true,
  }],
  'one-var': ['error', 'never'],
  'operator-linebreak': ['error', 'before'],
  'padded-blocks': ['error', 'never'],
  'padding-line-between-statements': ['error', {
    blankLine: 'always',
    next: 'return',
    prev: '*',
  }],
  'prefer-exponentiation-operator': 'warn',
  'prefer-object-spread': 'warn',
  'prefer-promise-reject-errors': 'error',
  'quote-props': ['error', 'consistent'],
  'quotes': ['error', 'single', 'avoid-escape'],
  'radix': 'warn',
  'require-atomic-updates': 'warn',
  'semi': ['error', 'never'],
  'semi-style': ['error', 'last'],
  'space-before-blocks': ['error', 'always'],
  'space-before-function-paren': ['error', {
    anonymous: 'always',
    named: 'never',
  }],
  'space-in-parens': ['error', 'never'],
  'space-infix-ops': 'error',
  'space-unary-ops': ['error', {
    nonwords: false,
    words: true,
  }],
  'spaced-comment': ['error', 'always'],
  'switch-colon-spacing': ['error', {
    'after': true,
    'before': false,
  }],
  'template-tag-spacing': ['error', 'never'],
  'valid-jsdoc': 'warn',
  'vars-on-top': 'warn',
  'yoda': ['error', 'never', {
    exceptRange: true,
  }],
}

const importRules = {
  'import/order': ['error', {
    'newlines-between': 'always',
  }],
  'import/no-absolute-path': 'error',
  'import/no-dynamic-require': 'error',
  'import/no-self-import': 'error',
  'import/no-cycle': 'warn',
  'import/no-useless-path-segments': 'error',
  'import/no-relative-parent-imports': 'off',
  'import/no-deprecated': 'error',
  'import/no-extraneous-dependencies': ['error', {
    devDependencies: false,
    peerDependencies: false,
    optionalDependencies: false,
    bundledDependencies: false,
  }],
  'import/no-mutable-exports': 'error',
  'import/no-unused-modules': ['error', {
    missingExports: true,
    unusedExports: true,
  }],
  'import/no-commonjs': 'error',
  'import/no-amd': 'error',
  'import/first': 'error',
  'import/exports-last': 'off',
  'import/extensions': ['error', 'never', {
    json: 'always',
  }],
  'import/newline-after-import': 'error',
  'import/prefer-default-export': 'off',
  'import/no-unassigned-import': 'error',
}

module.exports = {
  extends: [
    'eslint:recommended',
    'plugin:import/errors',
    'plugin:import/warnings',
  ],
  plugins: [
    'import',
  ],
  rules: {
    ...eslintRules,
    ...importRules,
  },
}
